// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "gophkeeper/models"

	testing "testing"
)

// FileBinder is an autogenerated mock type for the FileBinder type
type FileBinder struct {
	mock.Mock
}

type FileBinder_Expecter struct {
	mock *mock.Mock
}

func (_m *FileBinder) EXPECT() *FileBinder_Expecter {
	return &FileBinder_Expecter{mock: &_m.Mock}
}

// CheckFileExist provides a mock function with given fields: ctx, username
func (_m *FileBinder) CheckFileExist(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileBinder_CheckFileExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFileExist'
type FileBinder_CheckFileExist_Call struct {
	*mock.Call
}

// CheckFileExist is a helper method to define mock.On call
//  - ctx context.Context
//  - username string
func (_e *FileBinder_Expecter) CheckFileExist(ctx interface{}, username interface{}) *FileBinder_CheckFileExist_Call {
	return &FileBinder_CheckFileExist_Call{Call: _e.mock.On("CheckFileExist", ctx, username)}
}

func (_c *FileBinder_CheckFileExist_Call) Run(run func(ctx context.Context, username string)) *FileBinder_CheckFileExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FileBinder_CheckFileExist_Call) Return(_a0 bool, _a1 error) *FileBinder_CheckFileExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadStorage provides a mock function with given fields: ctx, username
func (_m *FileBinder) ReadStorage(ctx context.Context, username string) (models.StorageData, error) {
	ret := _m.Called(ctx, username)

	var r0 models.StorageData
	if rf, ok := ret.Get(0).(func(context.Context, string) models.StorageData); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(models.StorageData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileBinder_ReadStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadStorage'
type FileBinder_ReadStorage_Call struct {
	*mock.Call
}

// ReadStorage is a helper method to define mock.On call
//  - ctx context.Context
//  - username string
func (_e *FileBinder_Expecter) ReadStorage(ctx interface{}, username interface{}) *FileBinder_ReadStorage_Call {
	return &FileBinder_ReadStorage_Call{Call: _e.mock.On("ReadStorage", ctx, username)}
}

func (_c *FileBinder_ReadStorage_Call) Run(run func(ctx context.Context, username string)) *FileBinder_ReadStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FileBinder_ReadStorage_Call) Return(_a0 models.StorageData, _a1 error) *FileBinder_ReadStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SaveStorage provides a mock function with given fields: ctx, data
func (_m *FileBinder) SaveStorage(ctx context.Context, data models.StorageData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.StorageData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileBinder_SaveStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveStorage'
type FileBinder_SaveStorage_Call struct {
	*mock.Call
}

// SaveStorage is a helper method to define mock.On call
//  - ctx context.Context
//  - data models.StorageData
func (_e *FileBinder_Expecter) SaveStorage(ctx interface{}, data interface{}) *FileBinder_SaveStorage_Call {
	return &FileBinder_SaveStorage_Call{Call: _e.mock.On("SaveStorage", ctx, data)}
}

func (_c *FileBinder_SaveStorage_Call) Run(run func(ctx context.Context, data models.StorageData)) *FileBinder_SaveStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.StorageData))
	})
	return _c
}

func (_c *FileBinder_SaveStorage_Call) Return(_a0 error) *FileBinder_SaveStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewFileBinder creates a new instance of FileBinder. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileBinder(t testing.TB) *FileBinder {
	mock := &FileBinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
