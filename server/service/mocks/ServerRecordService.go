// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gophkeeper/models"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ServerRecordService is an autogenerated mock type for the ServerRecordService type
type ServerRecordService struct {
	mock.Mock
}

// Load provides a mock function with given fields: ctx, username, loadFn
func (_m *ServerRecordService) Load(ctx context.Context, username string, loadFn func(models.StorageData) string) (string, error) {
	ret := _m.Called(ctx, username, loadFn)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, func(models.StorageData) string) string); ok {
		r0 = rf(ctx, username, loadFn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, func(models.StorageData) string) error); ok {
		r1 = rf(ctx, username, loadFn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, username, removeFn
func (_m *ServerRecordService) Remove(ctx context.Context, username string, removeFn func(models.StorageData) error) error {
	ret := _m.Called(ctx, username, removeFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(models.StorageData) error) error); ok {
		r0 = rf(ctx, username, removeFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, username, updateFn
func (_m *ServerRecordService) Save(ctx context.Context, username string, updateFn func(models.StorageData) error) error {
	ret := _m.Called(ctx, username, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(models.StorageData) error) error); ok {
		r0 = rf(ctx, username, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServerRecordService creates a new instance of ServerRecordService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewServerRecordService(t testing.TB) *ServerRecordService {
	mock := &ServerRecordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
