// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	clientmodels "gophkeeper/client/clientmodels"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ClientLocalStorage is an autogenerated mock type for the ClientLocalStorage type
type ClientLocalStorage struct {
	mock.Mock
}

// ClearActions provides a mock function with given fields: ctx
func (_m *ClientLocalStorage) ClearActions(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *ClientLocalStorage) Close() {
	_m.Called()
}

// LoadRecords provides a mock function with given fields: ctx
func (_m *ClientLocalStorage) LoadRecords(ctx context.Context) ([]clientmodels.RecordFileLine, error) {
	ret := _m.Called(ctx)

	var r0 []clientmodels.RecordFileLine
	if rf, ok := ret.Get(0).(func(context.Context) []clientmodels.RecordFileLine); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.RecordFileLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRecord provides a mock function with given fields: ctx, key, method
func (_m *ClientLocalStorage) RemoveRecord(ctx context.Context, key string, method string) error {
	ret := _m.Called(ctx, key, method)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, method)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecord provides a mock function with given fields: ctx, key, data, method
func (_m *ClientLocalStorage) SaveRecord(ctx context.Context, key string, data string, method string) error {
	ret := _m.Called(ctx, key, data, method)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, key, data, method)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientLocalStorage creates a new instance of ClientLocalStorage. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientLocalStorage(t testing.TB) *ClientLocalStorage {
	mock := &ClientLocalStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
