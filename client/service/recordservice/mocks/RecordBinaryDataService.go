// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	clientmodels "github.com/djokcik/gophkeeper/client/clientmodels"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RecordBinaryDataService is an autogenerated mock type for the RecordBinaryDataService type
type RecordBinaryDataService struct {
	mock.Mock
}

type RecordBinaryDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordBinaryDataService) EXPECT() *RecordBinaryDataService_Expecter {
	return &RecordBinaryDataService_Expecter{mock: &_m.Mock}
}

// LoadRecordByKey provides a mock function with given fields: ctx, key
func (_m *RecordBinaryDataService) LoadRecordByKey(ctx context.Context, key string) (clientmodels.RecordBinaryData, error) {
	ret := _m.Called(ctx, key)

	var r0 clientmodels.RecordBinaryData
	if rf, ok := ret.Get(0).(func(context.Context, string) clientmodels.RecordBinaryData); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(clientmodels.RecordBinaryData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordBinaryDataService_LoadRecordByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRecordByKey'
type RecordBinaryDataService_LoadRecordByKey_Call struct {
	*mock.Call
}

// LoadRecordByKey is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *RecordBinaryDataService_Expecter) LoadRecordByKey(ctx interface{}, key interface{}) *RecordBinaryDataService_LoadRecordByKey_Call {
	return &RecordBinaryDataService_LoadRecordByKey_Call{Call: _e.mock.On("LoadRecordByKey", ctx, key)}
}

func (_c *RecordBinaryDataService_LoadRecordByKey_Call) Run(run func(ctx context.Context, key string)) *RecordBinaryDataService_LoadRecordByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecordBinaryDataService_LoadRecordByKey_Call) Return(_a0 clientmodels.RecordBinaryData, _a1 error) *RecordBinaryDataService_LoadRecordByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveRecordByKey provides a mock function with given fields: ctx, key
func (_m *RecordBinaryDataService) RemoveRecordByKey(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordBinaryDataService_RemoveRecordByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRecordByKey'
type RecordBinaryDataService_RemoveRecordByKey_Call struct {
	*mock.Call
}

// RemoveRecordByKey is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *RecordBinaryDataService_Expecter) RemoveRecordByKey(ctx interface{}, key interface{}) *RecordBinaryDataService_RemoveRecordByKey_Call {
	return &RecordBinaryDataService_RemoveRecordByKey_Call{Call: _e.mock.On("RemoveRecordByKey", ctx, key)}
}

func (_c *RecordBinaryDataService_RemoveRecordByKey_Call) Run(run func(ctx context.Context, key string)) *RecordBinaryDataService_RemoveRecordByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecordBinaryDataService_RemoveRecordByKey_Call) Return(_a0 error) *RecordBinaryDataService_RemoveRecordByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// SaveRecord provides a mock function with given fields: ctx, key, data
func (_m *RecordBinaryDataService) SaveRecord(ctx context.Context, key string, data clientmodels.RecordBinaryData) error {
	ret := _m.Called(ctx, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, clientmodels.RecordBinaryData) error); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordBinaryDataService_SaveRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRecord'
type RecordBinaryDataService_SaveRecord_Call struct {
	*mock.Call
}

// SaveRecord is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - data clientmodels.RecordBinaryData
func (_e *RecordBinaryDataService_Expecter) SaveRecord(ctx interface{}, key interface{}, data interface{}) *RecordBinaryDataService_SaveRecord_Call {
	return &RecordBinaryDataService_SaveRecord_Call{Call: _e.mock.On("SaveRecord", ctx, key, data)}
}

func (_c *RecordBinaryDataService_SaveRecord_Call) Run(run func(ctx context.Context, key string, data clientmodels.RecordBinaryData)) *RecordBinaryDataService_SaveRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(clientmodels.RecordBinaryData))
	})
	return _c
}

func (_c *RecordBinaryDataService_SaveRecord_Call) Return(_a0 error) *RecordBinaryDataService_SaveRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewRecordBinaryDataService creates a new instance of RecordBinaryDataService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecordBinaryDataService(t testing.TB) *RecordBinaryDataService {
	mock := &RecordBinaryDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
