// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/djokcik/gophkeeper/models"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ClientAuthService is an autogenerated mock type for the ClientAuthService type
type ClientAuthService struct {
	mock.Mock
}

// Register provides a mock function with given fields: ctx, username, password
func (_m *ClientAuthService) Register(ctx context.Context, username string, password string) (models.ClientUser, error) {
	ret := _m.Called(ctx, username, password)

	var r0 models.ClientUser
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.ClientUser); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(models.ClientUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: ctx, username, password
func (_m *ClientAuthService) SignIn(ctx context.Context, username string, password string) (models.ClientUser, error) {
	ret := _m.Called(ctx, username, password)

	var r0 models.ClientUser
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.ClientUser); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(models.ClientUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientAuthService creates a new instance of ClientAuthService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientAuthService(t testing.TB) *ClientAuthService {
	mock := &ClientAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
