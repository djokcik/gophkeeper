// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ClientRpcService is an autogenerated mock type for the ClientRpcService type
type ClientRpcService struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, serviceMethod, args, reply
func (_m *ClientRpcService) Call(ctx context.Context, serviceMethod string, args interface{}, reply interface{}) error {
	ret := _m.Called(ctx, serviceMethod, args, reply)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, serviceMethod, args, reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckOnline provides a mock function with given fields:
func (_m *ClientRpcService) CheckOnline() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoadRecordBankCardByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) LoadRecordBankCardByKey(ctx context.Context, token string, key string) (string, error) {
	ret := _m.Called(ctx, token, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRecordBinaryDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) LoadRecordBinaryDataByKey(ctx context.Context, token string, key string) (string, error) {
	ret := _m.Called(ctx, token, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRecordPersonalDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) LoadRecordPersonalDataByKey(ctx context.Context, token string, key string) (string, error) {
	ret := _m.Called(ctx, token, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRecordTextDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) LoadRecordTextDataByKey(ctx context.Context, token string, key string) (string, error) {
	ret := _m.Called(ctx, token, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *ClientRpcService) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, username, password
func (_m *ClientRpcService) Register(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRecordBankCardByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) RemoveRecordBankCardByKey(ctx context.Context, token string, key string) error {
	ret := _m.Called(ctx, token, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRecordBinaryDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) RemoveRecordBinaryDataByKey(ctx context.Context, token string, key string) error {
	ret := _m.Called(ctx, token, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRecordPersonalDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) RemoveRecordPersonalDataByKey(ctx context.Context, token string, key string) error {
	ret := _m.Called(ctx, token, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRecordTextDataByKey provides a mock function with given fields: ctx, token, key
func (_m *ClientRpcService) RemoveRecordTextDataByKey(ctx context.Context, token string, key string) error {
	ret := _m.Called(ctx, token, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecordBankCard provides a mock function with given fields: ctx, token, key, data
func (_m *ClientRpcService) SaveRecordBankCard(ctx context.Context, token string, key string, data string) error {
	ret := _m.Called(ctx, token, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecordBinaryData provides a mock function with given fields: ctx, token, key, data
func (_m *ClientRpcService) SaveRecordBinaryData(ctx context.Context, token string, key string, data string) error {
	ret := _m.Called(ctx, token, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecordPersonalData provides a mock function with given fields: ctx, token, key, data
func (_m *ClientRpcService) SaveRecordPersonalData(ctx context.Context, token string, key string, data string) error {
	ret := _m.Called(ctx, token, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecordTextData provides a mock function with given fields: ctx, token, key, data
func (_m *ClientRpcService) SaveRecordTextData(ctx context.Context, token string, key string, data string) error {
	ret := _m.Called(ctx, token, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientRpcService creates a new instance of ClientRpcService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientRpcService(t testing.TB) *ClientRpcService {
	mock := &ClientRpcService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
