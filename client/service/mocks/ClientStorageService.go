// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	clientmodels "gophkeeper/client/clientmodels"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ClientStorageService is an autogenerated mock type for the ClientStorageService type
type ClientStorageService struct {
	mock.Mock
}

type ClientStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientStorageService) EXPECT() *ClientStorageService_Expecter {
	return &ClientStorageService_Expecter{mock: &_m.Mock}
}

// LoadRecords provides a mock function with given fields: ctx
func (_m *ClientStorageService) LoadRecords(ctx context.Context) ([]clientmodels.RecordFileLine, error) {
	ret := _m.Called(ctx)

	var r0 []clientmodels.RecordFileLine
	if rf, ok := ret.Get(0).(func(context.Context) []clientmodels.RecordFileLine); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.RecordFileLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientStorageService_LoadRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRecords'
type ClientStorageService_LoadRecords_Call struct {
	*mock.Call
}

// LoadRecords is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientStorageService_Expecter) LoadRecords(ctx interface{}) *ClientStorageService_LoadRecords_Call {
	return &ClientStorageService_LoadRecords_Call{Call: _e.mock.On("LoadRecords", ctx)}
}

func (_c *ClientStorageService_LoadRecords_Call) Run(run func(ctx context.Context)) *ClientStorageService_LoadRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientStorageService_LoadRecords_Call) Return(_a0 []clientmodels.RecordFileLine, _a1 error) *ClientStorageService_LoadRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SyncServer provides a mock function with given fields: ctx
func (_m *ClientStorageService) SyncServer(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientStorageService_SyncServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncServer'
type ClientStorageService_SyncServer_Call struct {
	*mock.Call
}

// SyncServer is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ClientStorageService_Expecter) SyncServer(ctx interface{}) *ClientStorageService_SyncServer_Call {
	return &ClientStorageService_SyncServer_Call{Call: _e.mock.On("SyncServer", ctx)}
}

func (_c *ClientStorageService_SyncServer_Call) Run(run func(ctx context.Context)) *ClientStorageService_SyncServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientStorageService_SyncServer_Call) Return(_a0 error) *ClientStorageService_SyncServer_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewClientStorageService creates a new instance of ClientStorageService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientStorageService(t testing.TB) *ClientStorageService {
	mock := &ClientStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
