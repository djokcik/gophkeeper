// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	models "github.com/djokcik/gophkeeper/models"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ClientUserService is an autogenerated mock type for the ClientUserService type
type ClientUserService struct {
	mock.Mock
}

type ClientUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientUserService) EXPECT() *ClientUserService_Expecter {
	return &ClientUserService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields:
func (_m *ClientUserService) GetUser() models.ClientUser {
	ret := _m.Called()

	var r0 models.ClientUser
	if rf, ok := ret.Get(0).(func() models.ClientUser); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.ClientUser)
	}

	return r0
}

// ClientUserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ClientUserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
func (_e *ClientUserService_Expecter) GetUser() *ClientUserService_GetUser_Call {
	return &ClientUserService_GetUser_Call{Call: _e.mock.On("GetUser")}
}

func (_c *ClientUserService_GetUser_Call) Run(run func()) *ClientUserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientUserService_GetUser_Call) Return(_a0 models.ClientUser) *ClientUserService_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// SaveUser provides a mock function with given fields: user
func (_m *ClientUserService) SaveUser(user models.ClientUser) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ClientUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientUserService_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type ClientUserService_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//  - user models.ClientUser
func (_e *ClientUserService_Expecter) SaveUser(user interface{}) *ClientUserService_SaveUser_Call {
	return &ClientUserService_SaveUser_Call{Call: _e.mock.On("SaveUser", user)}
}

func (_c *ClientUserService_SaveUser_Call) Run(run func(user models.ClientUser)) *ClientUserService_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ClientUser))
	})
	return _c
}

func (_c *ClientUserService_SaveUser_Call) Return(_a0 error) *ClientUserService_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewClientUserService creates a new instance of ClientUserService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientUserService(t testing.TB) *ClientUserService {
	mock := &ClientUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
