// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// AuthUtilsService is an autogenerated mock type for the AuthUtilsService type
type AuthUtilsService struct {
	mock.Mock
}

// CompareHashAndPassword provides a mock function with given fields: password, hash
func (_m *AuthUtilsService) CompareHashAndPassword(password string, hash string) error {
	ret := _m.Called(password, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: secretKey, username
func (_m *AuthUtilsService) CreateToken(secretKey string, username string) (string, error) {
	ret := _m.Called(secretKey, username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(secretKey, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(secretKey, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashAndSalt provides a mock function with given fields: pwd, pepper
func (_m *AuthUtilsService) HashAndSalt(pwd string, pepper string) (string, error) {
	ret := _m.Called(pwd, pepper)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(pwd, pepper)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pwd, pepper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: accessToken, secretKey
func (_m *AuthUtilsService) ParseToken(accessToken string, secretKey string) (string, error) {
	ret := _m.Called(accessToken, secretKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(accessToken, secretKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, secretKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUtilsService creates a new instance of AuthUtilsService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUtilsService(t testing.TB) *AuthUtilsService {
	mock := &AuthUtilsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
