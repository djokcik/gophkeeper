// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// CryptoService is an autogenerated mock type for the CryptoService type
type CryptoService struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: ctx, encryptedString, key
func (_m *CryptoService) Decrypt(ctx context.Context, encryptedString string, key string) ([]byte, error) {
	ret := _m.Called(ctx, encryptedString, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, encryptedString, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, encryptedString, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptData provides a mock function with given fields: ctx, userPassword, encryptedData, response
func (_m *CryptoService) DecryptData(ctx context.Context, userPassword string, encryptedData string, response interface{}) error {
	ret := _m.Called(ctx, userPassword, encryptedData, response)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, userPassword, encryptedData, response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encrypt provides a mock function with given fields: ctx, data, key
func (_m *CryptoService) Encrypt(ctx context.Context, data []byte, key string) (string, error) {
	ret := _m.Called(ctx, data, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) string); ok {
		r0 = rf(ctx, data, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, data, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptData provides a mock function with given fields: ctx, userPassword, data
func (_m *CryptoService) EncryptData(ctx context.Context, userPassword string, data interface{}) (string, error) {
	ret := _m.Called(ctx, userPassword, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) string); ok {
		r0 = rf(ctx, userPassword, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, userPassword, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateHash provides a mock function with given fields: value
func (_m *CryptoService) GenerateHash(value string) string {
	ret := _m.Called(value)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewCryptoService creates a new instance of CryptoService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCryptoService(t testing.TB) *CryptoService {
	mock := &CryptoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
