// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	client "gophkeeper/client"

	mock "github.com/stretchr/testify/mock"

	server "gophkeeper/server"

	testing "testing"

	tls "crypto/tls"
)

// SSLConfigService is an autogenerated mock type for the SSLConfigService type
type SSLConfigService struct {
	mock.Mock
}

// LoadClientCertificate provides a mock function with given fields: cfg
func (_m *SSLConfigService) LoadClientCertificate(cfg client.Config) (*tls.Config, error) {
	ret := _m.Called(cfg)

	var r0 *tls.Config
	if rf, ok := ret.Get(0).(func(client.Config) *tls.Config); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.Config) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadServerCertificate provides a mock function with given fields: cfg
func (_m *SSLConfigService) LoadServerCertificate(cfg server.Config) (*tls.Config, error) {
	ret := _m.Called(cfg)

	var r0 *tls.Config
	if rf, ok := ret.Get(0).(func(server.Config) *tls.Config); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.Config) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSSLConfigService creates a new instance of SSLConfigService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSSLConfigService(t testing.TB) *SSLConfigService {
	mock := &SSLConfigService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
